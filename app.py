from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from datetime import datetime
import uuid
from urllib.parse import urljoin
import os
import json
from pyngrok import ngrok
import secrets

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your-secret-key-here')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ngrok
def setup_ngrok():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ngrok ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook"""
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î tunnel ‡πÑ‡∏õ‡∏ó‡∏µ‡πà port 5000
        public_url = ngrok.connect(5000).public_url
        print(f"\nüåê HTTPS URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Line Webhook: {public_url}\n")
        return public_url
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ngrok ‡πÑ‡∏î‡πâ: {str(e)}")
        return None

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ngrok ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î debug
if app.debug:
    ngrok_url = setup_ngrok()
    if ngrok_url:
        print("‚ú® ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Line Webhook:")
        print("1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Line Developer Console")
        print("2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        print("3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Messaging API > Webhook settings")
        print(f"4. ‡∏ß‡∏≤‡∏á URL ‡∏ô‡∏µ‡πâ: {ngrok_url}/webhook/<your-path>")
        print("5. ‡∏Å‡∏î Verify ‡πÅ‡∏•‡∏∞ Update")

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á app
from models.webhook import Webhook, WebhookLog
from models.agent import Agent
from models.training_data import TrainingData

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
DATA_DIR = 'data'
AGENTS_FILE = os.path.join(DATA_DIR, 'agents.json')
WEBHOOKS_FILE = os.path.join(DATA_DIR, 'webhooks.json')
TRAINING_DATA_FILE = os.path.join(DATA_DIR, 'training_data.json')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def load_data(file_path, default=None):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        if not os.path.exists(file_path):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if not os.path.exists(os.path.dirname(file_path)):
                os.makedirs(os.path.dirname(file_path))
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(default if default is not None else [], f, ensure_ascii=False, indent=2)
            return default if default is not None else []
            
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {file_path}: {str(e)}")
        return default if default is not None else []

def save_data(file_path, data):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        if not os.path.exists(os.path.dirname(file_path)):
            os.makedirs(os.path.dirname(file_path))
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà {file_path}: {str(e)}")
        return False

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û
def init_data():
    """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
    global agents
    agents = load_data(AGENTS_FILE, [])
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhooks
    global webhooks
    webhooks = load_data(WEBHOOKS_FILE, [])
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• training data
    global training_data
    training_data = load_data(TRAINING_DATA_FILE, [])

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û
init_data()

def load_agents():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    return agents

def save_agents(agents_data):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    global agents
    agents = agents_data
    return save_data(AGENTS_FILE, agents)

def load_webhooks():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhooks"""
    return webhooks

def save_webhooks(webhooks_data):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• webhooks"""
    global webhooks
    webhooks = webhooks_data
    return save_data(WEBHOOKS_FILE, webhooks)

# Error handlers
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500

@app.errorhandler(Exception)
def handle_exception(e):
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡∏•‡∏á log
    app.logger.error(f"Unhandled exception: {str(e)}")
    return render_template('500.html'), 500

# ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
@app.route('/')
def index():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    return render_template('index.html')

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
@app.route('/agents')
def agents():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ AI Agents ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        agents_data = load_agents()
        return render_template('agents.html', agents=agents_data)
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}', 'error')
        return redirect(url_for('index'))

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡πÉ‡∏´‡∏°‡πà
@app.route('/agents/new', methods=['GET', 'POST'])
def new_agent():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á AI Agent ‡πÉ‡∏´‡∏°‡πà"""
    if request.method == 'POST':
        try:
            agents_data = load_agents()
            new_id = len(agents_data) + 1
            agent = {
                'id': new_id,
                'name': request.form['name'],
                'description': request.form['description'],
                'type': request.form['type']
            }
            agents_data.append(agent)
            save_agents(agents_data)
            flash('‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
            return redirect(url_for('agents'))
        except Exception as e:
            flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Agent: {str(e)}', 'error')
            return redirect(url_for('agents'))
    
    return render_template('agent_form.html')

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent
@app.route('/agents/<int:id>/edit', methods=['GET', 'POST'])
def edit_agent(id):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Agent"""
    try:
        agents_data = load_agents()
        agent = next((a for a in agents_data if a['id'] == id), None)
        
        if agent is None:
            flash('‡πÑ‡∏°‡πà‡∏û‡∏ö Agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', 'error')
            return redirect(url_for('agents'))
        
        if request.method == 'POST':
            agent.update({
                'name': request.form['name'],
                'description': request.form['description'],
                'type': request.form['type']
            })
            save_agents(agents_data)
            flash('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
            return redirect(url_for('agents'))
        
        return render_template('agent_form.html', id=id, agent=agent)
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Agent: {str(e)}', 'error')
        return redirect(url_for('agents'))

# ‡∏•‡∏ö Agent
@app.route('/agents/<int:id>/delete', methods=['POST'])
def delete_agent(id):
    """‡∏•‡∏ö AI Agent"""
    try:
        agents_data = load_agents()
        agents_data = [a for a in agents_data if a['id'] != id]
        save_agents(agents_data)
        flash('‡∏•‡∏ö Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á URL Path
def generate_webhook_path():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á URL path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook"""
    return f"webhook/{uuid.uuid4()}"

@app.route('/agents/<id>/webhooks/new', methods=['GET', 'POST'])
def new_webhook(id):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á webhook ‡πÉ‡∏´‡∏°‡πà"""
    try:
        if request.method == 'POST':
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á webhook ‡πÉ‡∏´‡∏°‡πà
            webhook = {
                'id': str(uuid.uuid4()),
                'name': request.form.get('name'),
                'description': request.form.get('description'),
                'url_path': generate_webhook_path(),
                'agent_id': id,
                'is_active': True,
                'secret_key': secrets.token_urlsafe(32),
                'created_at': datetime.now().isoformat()
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° webhook ‡πÉ‡∏´‡∏°‡πà
            webhooks.append(webhook)
            save_webhooks(webhooks)
            
            flash('‡∏™‡∏£‡πâ‡∏≤‡∏á Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
            return redirect(url_for('agents'))
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_webhook_url = urljoin(request.host_url, generate_webhook_path())
        
        # ‡∏™‡πà‡∏á ngrok URL ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        ngrok_url = None
        if app.debug:
            try:
                tunnels = ngrok.get_tunnels()
                if tunnels:
                    ngrok_url = tunnels[0].public_url
            except:
                pass
                
        return render_template(
            'webhook_form.html',
            agent_id=id,
            sample_webhook_url=sample_webhook_url,
            ngrok_url=ngrok_url
        )
        
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á webhook: {str(e)}', 'error')
        return redirect(url_for('agents'))

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô
@app.route('/agents/<int:id>/training-data/add', methods=['GET', 'POST'])
def add_training_data(id):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent"""
    try:
        agents_data = load_agents()
        agent = next((a for a in agents_data if a['id'] == id), None)
        
        if agent is None:
            flash('‡πÑ‡∏°‡πà‡∏û‡∏ö Agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô', 'error')
            return redirect(url_for('agents'))
        
        if request.method == 'POST':
            training_data = {
                'id': len(agent.get('training_data', [])) + 1,
                'prompt': request.form['prompt'],
                'description': request.form.get('description', ''),
                'created_at': datetime.now().isoformat()
            }
            
            if 'training_data' not in agent:
                agent['training_data'] = []
            agent['training_data'].append(training_data)
            save_agents(agents_data)
            
            flash('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
            return redirect(url_for('agents'))
        
        return render_template('training_data_form.html', agent=agent)
    except Exception as e:
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô: {str(e)}', 'error')
        return redirect(url_for('agents'))

@app.route('/webhook/<path>', methods=['POST'])
def webhook_endpoint(path):
    """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å webhook"""
    try:
        # ‡∏´‡∏≤ webhook ‡∏à‡∏≤‡∏Å path
        webhook = next((w for w in webhooks if w['url_path'] == f"webhook/{path}"), None)
        if not webhook:
            return jsonify({'error': 'Webhook ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}), 404
        
        if not webhook['is_active']:
            return jsonify({'error': 'Webhook ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}), 403
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å webhook log
        log = {
            'id': str(uuid.uuid4()),
            'webhook_id': webhook['id'],
            'request_data': request.json,
            'created_at': datetime.now().isoformat()
        }
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs
        logs = load_data(os.path.join(DATA_DIR, f"webhook_logs_{webhook['id']}.json"), [])
        logs.append(log)
        save_data(os.path.join(DATA_DIR, f"webhook_logs_{webhook['id']}.json"), logs)
        
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/logs/<webhook_id>')
def webhook_logs(webhook_id):
    """‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á webhook"""
    try:
        logs = load_data(os.path.join(DATA_DIR, f"webhook_logs_{webhook_id}.json"), [])
        return jsonify(logs), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/toggle/<webhook_id>')
def toggle_webhook(webhook_id):
    """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô webhook"""
    try:
        webhook = next((w for w in webhooks if w['id'] == webhook_id), None)
        if webhook:
            webhook['is_active'] = not webhook['is_active']
            save_webhooks(webhooks)
            return jsonify({'status': 'success', 'is_active': webhook['is_active']}), 200
        return jsonify({'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö webhook'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.context_processor
def inject_now():
    return {'now': datetime.now()}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)
